---
- name: 'install packages'
  win_chocolatey:
    name: "{{ item }}"
    state: present
  with_items:
    - awscli
    - curl
    - jre8
    - make
    - wget

- name: 'create jenkins service account user'
  win_user:
    name: "{{ jenkins_service_account_user }}"
    password: "{{ jenkins_service_account_password }}"
    state: present
    groups:
      - Users

# For some reason after you create the Jenkins service account
# it prevents the Administrator user being able to log in on RDP,
# so this resets that. The service account user doesn't have admin
# access, so it's difficult to debug problems with the machine.
- name: 'grant user permissions'
  win_user_right:
    name: "{{ item.priv }}"
    users:
      - "{{ item.user }}"
  with_items:
    - { user: "{{ jenkins_service_account_user }}", priv: SeServiceLogonRight }
    - { user: "{{ jenkins_service_account_user }}", priv: SeRemoteInteractiveLogonRight }
    - { user: Administrator , priv: SeServiceLogonRight }
    - { user: Administrator , priv: SeRemoteInteractiveLogonRight }

# The way to set this as the shell is to put the binary location at the beginning
# of system wide PATH variable. You can only use the shell tool location settings
# in Jenkins if all the slaves are Windows.
- name: 'set git bash as shell'
  win_command: 'cmd.exe /c setx /M path "{{ git_bash_shell_path }};%path%"'

- name: 'create the agent directories'
  win_file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ jenkins_slave_config_path }}"
    - "{{ windows_rust_slave_working_path }}"

- name: 'check if jenkins-slave service is installed'
  win_service:
    name: jenkins-slave
  register: jenkins_slave_service_result

- name: 'copy the jenkins agent jar'
  win_copy:
    src: agent.jar
    dest: "{{ jenkins_slave_agent_path }}"
  when: jenkins_slave_service_result.exists == False

- name: 'copy the jenkins service config'
  win_template:
    src: jenkins-service.xml
    dest: "{{ jenkins_slave_service_config_path }}"
  when: jenkins_slave_service_result.exists == False

- name: 'check if winsw binary has been downloaded'
  win_stat:
    path: "{{ jenkins_slave_service_winsw_path }}"
  register: jenkins_slave_service_winsw_path_result

- name: 'download the winsw binary'
  win_get_url:
    url: "{{ winsw_url }}"
    dest: "{{ jenkins_slave_service_winsw_path }}"
  when: jenkins_slave_service_winsw_path_result.stat.exists == False

- name: 'copy get agent secret key script'
  win_template:
    src: get-agent-key.ps1
    dest: "{{ jenkins_slave_config_path }}\\get-agent-key.ps1"
  when: jenkins_slave_service_result.exists == False

- name: 'run get agent secret key script'
  win_command: "powershell.exe {{ jenkins_slave_config_path }}\\get-agent-key.ps1"
  args:
    chdir: "{{ jenkins_slave_config_path }}"
  register: agent_secret_key
  when: jenkins_slave_service_result.exists == False

# There is no win_replace module yet, so doing this with Powershell.
- name: 'insert agent secret key into service configuration'
  win_shell: >
    (Get-Content jenkins-slave.xml).replace('SECRET_PLACEHOLDER', '{{ agent_secret_key.stdout_lines[0] }}') | `
    Set-Content jenkins-slave.xml
  args:
    chdir: "{{ jenkins_slave_config_path }}"
  when: jenkins_slave_service_result.exists == False

- name: 'create jenkins slave service'
  win_command: "jenkins-slave.exe install"
  args:
    chdir: "{{ jenkins_slave_config_path }}"
  when: jenkins_slave_service_result.exists == False

# This gets restarted (as opposed to just started) to take into account changes in the PATH variable.
- name: 'start jenkins slave service and enable auto start'
  win_service:
    name: jenkins-slave
    start_mode: auto
    state: restarted
