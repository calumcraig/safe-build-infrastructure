plugins:
  sites:
    - id: "default"
      url: "https://updates.jenkins.io/update-center.json"
jenkins:
  agentProtocols:
    - "JNLP4-connect"
    - "Ping"
  authorizationStrategy:
    globalMatrix:
      grantedPermissions:
        - "Overall/Read:authenticated"
        - "Overall/Read:Administrators"
        - "Overall/Administer:chriso"
        - "Overall/Administer:Administrators"
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false
  disableRememberMe: false
  mode: NORMAL
{% if cloud_environment is defined %}
  clouds:
    - amazonEC2:
        cloudName: "jenkins"
        credentialsId: "jenkins-ec2"
        instanceCapStr: ""
        privateKey: "{{ secret_jenkins_env_private_key }}"
        region: "eu-west-2"
        templates:
          - ami: "{{ docker_slave_ami_id }}"
            amiType:
              unixData:
                sshPort: "22"
            associatePublicIp: false
            connectBySSHProcess: false
            connectUsingPublicIp: false
            deleteRootOnTermination: false
            description: "{{ docker_slave_full_name }}"
            ebsOptimized: false
            idleTerminationMinutes: "30"
            labelString: "docker"
            mode: NORMAL
            monitoring: false
            numExecutors: 1
            remoteAdmin: "jenkins"
            remoteFS: "/home/jenkins"
            securityGroups: "{{ linux_slaves_security_group_name }}"
            stopOnTerminate: false
            subnetId: "{{ slave_vpc_subnet_id }}"
            t2Unlimited: false
            type: T2Micro
            useDedicatedTenancy: false
            useEphemeralDevices: false
            usePrivateDnsName: false
        useInstanceProfileForCredentials: false
{% endif %}
  nodes:
{% if cloud_environment is defined %}
    - permanent:
        launcher:
          sSHLauncher:
            credentialsId: "docker_slave_jenkins_user_ssh_key"
            host: "{{ osx_rust_slave_ip_address }}"
            launchTimeoutSeconds: 210
            maxNumRetries: 10
            port: 22
            retryWaitTime: 15
        name: "{{ osx_rust_slave_full_name }}"
        labelString: "osx"
        numExecutors: 2
        remoteFS: "/Users/jenkins"
{% else %}
    - permanent:
        launcher:
          sSHLauncher:
            credentialsId: "docker_slave_jenkins_user_ssh_key"
            host: "{{ docker_slave_ip_address }}"
            launchTimeoutSeconds: 210
            maxNumRetries: 10
            port: 22
            retryWaitTime: 15
        name: "{{ docker_slave_full_name }}"
        labelString: "docker"
        numExecutors: 2
        remoteFS: "/home/jenkins"
    - permanent:
        launcher:
          jnlp:
            workDirSettings:
              disabled: false
              failIfWorkDirIsMissing: false
              internalDir: "remoting"
        name: "{{ windows_rust_slave_full_name }}"
        labelString: "windows"
        numExecutors: 2
        # This variable must be without quotes for the Windows style path
        remoteFS: {{ windows_rust_slave_working_path }}
    - permanent:
        launcher:
          sSHLauncher:
            credentialsId: "docker_slave_jenkins_user_ssh_key"
            host: "{{ osx_rust_slave_ip_address }}"
            launchTimeoutSeconds: 210
            maxNumRetries: 10
            port: 22
            retryWaitTime: 15
        name: "{{ osx_rust_slave_full_name }}"
        labelString: "osx"
        numExecutors: 2
        remoteFS: "/Users/jenkins"
{% endif %}
  numExecutors: 2
  primaryView:
    all:
      name: "all"
  quietPeriod: 5
  scmCheckoutRetryCount: 0
  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
        - id: "{{ jenkins_admin_user }}"
          password: ${secret_jenkins_admin_user_password}
  slaveAgentPort: 50000
  views:
    - all:
        name: "all"
  remotingSecurity:
    enabled: true
tool:
  git:
    installations:
      - home: "git"
        name: "Default"
security:
  remotingCLI:
    enabled: false
credentials:
  system:
    domainCredentials:
      - credentials:
        - basicSSHUserPrivateKey:
            id: "docker_slave_jenkins_user_ssh_key"
            privateKeySource:
              directEntry:
                privateKey: ${secret_docker_slave_ssh_key}
            scope: GLOBAL
            username: "jenkins"
        - usernamePassword:
            id: "aws_jenkins_user_credentials"
            password: ${secret_aws_jenkins_secret_key}
            scope: GLOBAL
            username: "{{ aws_jenkins_access_key }}"
        - aws:
            accessKey: "AKIAVVODCRMSJYOPDR5R"
            description: "User for controlling the EC2 plugin."
            id: "jenkins-ec2"
            scope: GLOBAL
            secretKey: "{{ secret_aws_jenkins_ec2_user_secret_access_key }}"
